#!/usr/bin/env python

# kano-boards-daemon
#
# Copyright (C) 2015-2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# The DBus daemon which handles Kano hardware board add-ons.
# Currently, it only exports an interface for the LED Speaker.
#
# The deamon uses a system bus under the bus name 'me.kano.boards'


import os
import sys
import traceback
import dbus.exceptions
from dbus.mainloop.glib import DBusGMainLoop, threads_init

from gi.repository import GObject

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(0, DIR_PATH)
        KANO_HAT_MODULE = os.path.join(
            DIR_PATH, 'libs', 'pi_hat', 'library', 'python'
        )
        sys.path.insert(1, KANO_HAT_MODULE)

        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

from kano.logging import logger

from kano_peripherals.speaker_leds.driver.service import SpeakerLEDsService
from kano_peripherals.pi_hat.driver.service import PiHatService
from kano_peripherals.ck2_pro_hat.driver.service import CK2ProHatService
from kano_peripherals.paths import BUS_NAME


def main():
    GObject.threads_init()
    DBusGMainLoop(set_as_default=True)
    threads_init()

    try:
        # Reserving the bus name, other instances of kano-boards-daemon will fail.
        bus_name = dbus.service.BusName(BUS_NAME, bus=dbus.SystemBus(), do_not_queue=True)

        # Starting available D-Bus services, add more here.
        # speakerleds_service = SpeakerLEDsService(bus_name)  # Disabled.
        pihat_service = PiHatService(bus_name)
        ck2prohat_service = CK2ProHatService(bus_name)

    except dbus.exceptions.NameExistsException as e:
        logger.warn(
            'Could not reserve the SystemBus name, most likely another instance'
            ' of kano-boards-daemon already exists.\n{}'.format(e)
        )
        return 1

    except Exception as e:
        logger.error(
            'Unexpected error when starting the services.\n{}'
            .format(traceback.format_exc())
        )
        return 2

    GObject.MainLoop().run()

    # Exit cleanly.
    return 0


if __name__ == '__main__':
    sys.exit(main())
