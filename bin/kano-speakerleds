#!/usr/bin/env python

# kano-speakerleds
#
# Copyright (C) 2015-2018 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Command for interacting with LED Speaker and Pi Hat Kano boards.

"""
Usage:
    kano-speakerleds detect
    kano-speakerleds cpu-monitor (start|stop) [<rate>] [--check] [--retry=<seconds>]
    kano-speakerleds init-flow (start|stop) [<duration>] [<cycles>]
    kano-speakerleds notification (start|stop) [<spec>...]
    kano-speakerleds off
    kano-speakerleds -h | --help

Arguments:
    detect              Return 0 if the speaker LEDS are attached.
    cpu-monitor         Start or stop a cpu monitor animation.
    init-flow           Display the initflow pattern.
    notification        Start or stop a notification display.
    off                 Clear LEDs and stop all animations.

Options:
    -h, --help          Show this message.
"""


import os
import sys

from docopt import docopt

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(0, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

from kano_peripherals.speaker_leds.driver.high_level import get_speakerleds_interface
from kano_peripherals.pi_hat.driver.high_level import get_pihat_interface
from kano_peripherals.ck2_pro_hat.driver.high_level import get_ck2_pro_hat_interface

from kano_peripherals.wrappers.led_ring.notification import Notification
from kano_peripherals.wrappers.led_ring.cpu_monitor import CpuMonitor
from kano_peripherals.wrappers.led_ring.init_flow import InitFlow
from kano_peripherals.wrappers.led_ring.base_animation import BaseAnimation

from kano_peripherals.return_codes import *


def main(args):
    if args['detect']:
        iface = get_speakerleds_interface(retry_count=1)
        if iface and iface.detect():
            return RC_KANO_LED_SPEAKER_DETECTED

        iface = get_pihat_interface(retry_count=1)
        if iface and iface.detect():
            return RC_KANO_PI_HAT_DETECTED

        iface = get_ck2_pro_hat_interface(retry_count=1)
        if iface and iface.detect():
            return RC_KANO_POWER_HAT_DETECTED

        return RC_NO_BOARD_DETECTED

    elif args['cpu-monitor']:
        if args['start']:
            try:
                update_rate = int(args.get('<rate>')) if args.get('<rate>') else 5
            except:
                print '<rate> argument was not specified or not an int number'
                return RC_INCORRECT_ARGUMENTS

            try:
                retry_count = int(args.get('--retry')) if args.get('--retry') else 15
            except:
                print '[--retry] argument was not specified or not an int number'
                return RC_INCORRECT_ARGUMENTS

            animation = CpuMonitor()
            return animation.start(update_rate, args.get('--check'), retry_count)

        elif args['stop']:
            CpuMonitor.stop()

    elif args['init-flow']:
        if args['start']:
            try:
                duration = float(args.get('<duration>')) if args.get('<duration>') else 2.0
                cycles = float(args.get('<cycles>')) if args.get('<cycles>') else 4.0
            except:
                print '<duration> and <cycles> must be int or float numbers'
                return RC_INCORRECT_ARGUMENTS

            animation = InitFlow()
            return animation.start(duration, cycles)

        elif args['stop']:
            InitFlow.stop()

    elif args['notification']:
        if args['start']:
            animation = Notification()
            return animation.start(args['<spec>'])

        elif args['stop']:
            Notification().stop()

    elif args['off']:
        BaseAnimation.stop('')

if __name__ == "__main__":
    args = docopt(__doc__)
    sys.exit(main(args) or RC_SUCCESSFUL)
